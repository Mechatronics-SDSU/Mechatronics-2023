// IN PROGRESS //
ahrs_orientation_data:
    contains orientation data in the form yaw, pitch, roll
    @type float32[]
    @time every .6 seconds
    @details grab data with array [yaw, pitch, roll]

ms5837_depth_data:
    depth data calculated by pressure placed on ms5837 sensor
    @type float32
    @time on request

pid_ctrl_data:
    control signals needed by the thrusters to determine output strength
    @type float64[]
    @time every second
    @details six control signals output in the form [yaw, pitch, roll, x_pos, y_pos, z_pos]

zed_pos_data:
    point in space given by x, y, and z coordinate
    @type float32[]
    @time ***

zed_vision_data:
    object detection and current image broadcasting of zed camera
    @type ***
    @time *** 
//            //



/* ROS run commands for individual nodes and launch file if you ever need it */

ros2 run ahrs_node ahrs_exec
ros2 run pid_node pid_exec
ros2 run can2ros_driver can2ros_driver
ros2 run dres_dvl_decode dres_dvl_decode
ros2 launch launch.py
ros2 launch zed_wrapper zed2i.launch.py

/*                                                                           */



ALL TOPICS 
----------------------
/ahrs_orientation
/clicked_point
/diagnostics
/dres_mb_pub
/dvl_dist_1
/dvl_dist_2
/dvl_dist_3
/dvl_dist_4
/dvl_dist_bottom
/dvl_vel_e
/dvl_vel_x
/dvl_vel_y
/dvl_vel_z
/ms5837_depth
/ms5837_temp
/brping1_dist
/brping1_confidence
/parameter_events
/rosout
/tf
/tf_static
/zed2i/joint_states
/zed2i/robot_description
/zed2i/zed_node/atm_press
/zed2i/zed_node/confidence/confidence_map
/zed2i/zed_node/depth/camera_info
/zed2i/zed_node/depth/depth_info
/zed2i/zed_node/depth/depth_registered
/zed2i/zed_node/disparity/disparity_image
/zed2i/zed_node/imu/data
/zed2i/zed_node/imu/data_raw
/zed2i/zed_node/imu/mag
/zed2i/zed_node/left/camera_info
/zed2i/zed_node/left/image_rect_color
/zed2i/zed_node/left/image_rect_gray
/zed2i/zed_node/left_cam_imu_transform
/zed2i/zed_node/left_raw/camera_info
/zed2i/zed_node/left_raw/image_raw_color
/zed2i/zed_node/left_raw/image_raw_gray
/zed2i/zed_node/odom
/zed2i/zed_node/path_map
/zed2i/zed_node/path_odom
/zed2i/zed_node/point_cloud/cloud_registered
/zed2i/zed_node/pose
/zed2i/zed_node/pose_with_covariance
/zed2i/zed_node/rgb/camera_info
/zed2i/zed_node/rgb/image_rect_color
/zed2i/zed_node/rgb/image_rect_gray
/zed2i/zed_node/rgb_raw/camera_info
/zed2i/zed_node/rgb_raw/image_raw_color
/zed2i/zed_node/rgb_raw/image_raw_gray
/zed2i/zed_node/right/camera_info
/zed2i/zed_node/right/image_rect_color
/zed2i/zed_node/right/image_rect_gray
/zed2i/zed_node/right_raw/camera_info
/zed2i/zed_node/right_raw/image_raw_color
/zed2i/zed_node/right_raw/image_raw_gray
/zed2i/zed_node/stereo/image_rect_color
/zed2i/zed_node/stereo_raw/image_raw_color
/zed2i/zed_node/temperature/imu
/zed2i/zed_node/temperature/left
/zed2i/zed_node/temperature/right


/* Instructions to send one command to test PID */
ros2 topic pub -1 ahrs_orientation scion_types/msg/Orientation "{orientation: [10.5,15,20]}"                <--- Send dummy data for "actual" orientation, the PID will show the ctrl vals it would output
ros2 topic pub -1 position_data scion_types/msg/Position "{position: [0,0,1]}"
--------------------------------------------------

/* If you want to send at a certain frequency */ 
ros2 topic pub -r 10 ahrs_position scion_types/msg/Position "{orientation: [1,0,0]}"
-----------------------------------------------




INSTRUCTIONS FOR SERVICE CALL
-----------------------------------

/* If you want to see all the services you can do ros2 services list*/

/* Then you can see the specific type of data you need to send for the request using service type and the full service name*/
ros2 service type /zed2i/zed_node/enable_mapping

    \std_srvs/srv/SetBool                           <-------- It will show you this

/* Then you'll want to see how exactly you build that request so you can use the interface show command and you have to enter the ROS2 custom type  */
    
    ros2 interface show \std_srvs/srv/SetBool

/* So it will show you something like this where the top half is the request and the bottom half is what it'll give you as a response*/
bool data # e.g. for hardware enabling / disabling
---
bool success   # indicate successful run of triggered service
string message # informational, e.g. for error messages

/* Now we know our request just has a bool called data so we'll pass that in to the service request */

    ros2 service call /zed2i/zed_node/enable_mapping std_srvs/srv/SetBool "{data: True}"

/* And you'll get this beautiful message */
waiting for service to become available...
requester: making request: std_srvs.srv.SetBool_Request(data=True)

response:
std_srvs.srv.SetBool_Response(success=True, message='Spatial Mapping started')


/ ************************************************************* /

Each node has SIX default services - these ones 

/ahrs_node/describe_parameters
/ahrs_node/get_parameter_types
/ahrs_node/get_parameters
/ahrs_node/list_parameters
/ahrs_node/set_parameters
/ahrs_node/set_parameters_atomically
/can_driver/describe_parameters
/can_driver/get_parameter_types
/can_driver/get_parameters
/can_driver/list_parameters
/can_driver/set_parameters
/can_driver/set_parameters_atomically



ZED NODE SERVICES 

/zed2i/zed_node/reset_odometry
/zed2i/zed_node/reset_pos_tracking
/zed2i/zed_node/reset_roi

/zed2i/zed_node/set_pose
/zed2i/zed_node/set_roi
/zed2i/zed_node/start_svo_rec
/zed2i/zed_node/stop_svo_rec
/zed2i/zed_node/toggle_svo_pause


RESET POSITION PROCESS

launch -> subscribe to pose -> watch position
ros2 service call /zed2i/zed_node/reset_pos_tracking std_srvs/srv/Trigger


Getting zed position
----------------------------
You have to subscribe to zed node topic called /zed2i/zed_node/pose

Then if you do
    
    ros2 topic type /zed2i/zed_node/pose

It'll show you that it's a geometry_msgs/msg/PoseStamped message type 

    ros2 interface show geometry_msgs/msg/PoseStamped

Do this and you'll see it's made up of 

std_msgs/Header header
Pose pose

I'll save the headache but pose is made up of Position and like Quaternion or something and position has float 64 of x,y, and z, so that's what we need
