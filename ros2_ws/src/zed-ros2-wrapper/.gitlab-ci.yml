#include:
#  - local: '/ci-job-planning.yml'

##############################
#  Artifacts default values  #
##############################
#Folders to be saved after the build
.artifacts_files:
  paths: &artifacts_files_definition
    - ros2_ws/install
    #- lib/build/*.a
    #- lib/build/*.so
    #- lib/build/Release/*.lib
    #- lib/build/Release/*.dll
    # Ninja output on a different path
    #- lib/build/*.lib
    #- lib/build/*.dll
    #- lib/include/sl_zed/Camera.hpp
    #- lib/include/sl_zed/defines.hpp
    #- lib/include/sl_core/mapping/Mesh.hpp
    #- lib/include/sl_core/utils/Core.hpp
    #- lib/include/sl_core/utils/types.hpp
    #- lib/include/sl_input
    #- lib/include/sl_core
    #- lib/include/sl_zed
    #- lib/include/sl_fusion
    #- lib/include/utils
    #- lib/build/zed-config.cmake
    #- lib/build/zed-config-version.cmake
    #- ZED_SDK_*.run
    #- ZED_SDK_*.exe
    #- build-timers.json

#Folders to be saved after the tests
.test_artifacts_files:
  paths: &test_artifacts_files_definition
    #- lib/test/bin/data/current/*
    - ros2/test/bin/data/current/*

#XML files to be used for Gitlab test report interface
.test_artifacts_report_files:
  reports: &test_artifacts_report_files_definition
    #junit: lib/test/bin/output/*/*_test_*.xml
    junit: ros2/test/bin/output/*/*_test_*.xml

.linux_artifacts:
  name: &linux_artifacts_naming_definition "${CI_PROJECT_NAMESPACE}_${CI_PROJECT_NAME}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"

#Artifacts configuration
.artifacts_config:
  expire_in: &artifacts_expire_in_definition 2 weeks

############
#  Stages  #
############
stages:
  - build
  - unit_test
  - deploy


variables:
  #GIT_SUBMODULE_STRATEGY: normal
  GIT_SUBMODULE_STRATEGY: recursive
  #GIT_CLONE_PATH: $CI_BUILDS_DIR/ros2_ws/src/$CI_PROJECT_NAME # must be enabled in the configuration of the runners!

######################
# BUILDER selection  #
######################

.linux_docker_builder_target:
  tags: &linux_docker_builder_target_definition
    - docker-builder
    - linux

# deploy-support is actually linux + docker (but for weaker builder)
.deploy_target:
  tags: &deploy_target_definition
    - deploy-support

.linux_docker_builder_qemu_target:
  tags: &linux_docker_builder_qemu_target_definition
    - docker-builder
    - linux
    - qemu-support

.linux_docker_builder_native_target:
  tags: &linux_docker_builder_native_target_definition
    - jetson
    - L4T35.1


######################
# Runner selection  #
######################

# generic
.runner_linux_jetson_l4t35_1_target:
  tags: &runner_linux_jetson_l4t35_1_target_definition
    - linux
    - jetson
    - L4T35.1

.runner_linux_jetson_l4t32_7_target:
  tags: &runner_linux_jetson_l4t32_7_target_definition
    - linux
    - jetson
    - L4T32.7

.runner_linux_jetson_nano_l4t32_7_target:
  tags: &runner_linux_jetson_nano_l4t32_7_target_definition
    - linux
    - jetson
    - nano
    - perfTest
    - L4T32.7

.runner_linux_jetson_tx2_nx_l4t32_7_target:
  tags: &runner_linux_jetson_tx2_nx_l4t32_7_target_definition
    - linux
    - jetson
    - tx2_nx
    - perfTest
    - L4T32.7

.runner_linux_jetson_xavier_nx_l4t35_1_target:
  tags: &runner_linux_jetson_xavier_nx_l4t35_1_target_definition
    - linux
    - jetson
    - xavier_nx
    - perfTest
    - L4T35.1

.runner_linux_jetson_xavier_agx_l4t35_1_target:
  tags: &runner_linux_jetson_xavier_agx_l4t35_1_target_definition
    - linux
    - jetson
    - xavier
    - perfTest
    - L4T35.1

.runner_linux_jetson_orin_agx_l4t35_1_target:
  tags: &runner_linux_jetson_orin_agx_l4t35_1_target_definition
    - linux
    - jetson
    - orin
    - perfTest
    - L4T35.1

.runner_linux_jetson_live_l4t32_7_target:
  tags: &runner_linux_jetson_live_l4t32_7_target_definition
    - linux
    - jetson
    - live-runner
    - L4T32.7

.runner_ubuntu18_desktop_live_cuda11_0_target:
  tags: &runner_ubuntu18_desktop_live_cuda11_0_target_definition
    - ubuntu18
    - x86_64
    - perfTest
    - CUDA11
    - live-runner

.runner_ubuntu18_desktop_cuda11_0_target:
  tags: &runner_ubuntu18_desktop_cuda11_0_target_definition
    - ubuntu18
    - x86_64
    - perfTest
    - CUDA11

.runner_ubuntu_docker_desktop_target:
  tags: &runner_ubuntu_docker_desktop_target_definition
    - x86_64
    - docker-runner
    - linux

.runner_ubuntu_docker_live_desktop_target:
  tags: &runner_ubuntu_docker_live_desktop_target_definition
    - x86_64
    - docker-runner
    - linux
    - live-runner
    - deploy-support

## Memory target
.memory_ubuntu18_desktop_cuda11_0_target:
  tags: &memory_ubuntu18_desktop_cuda11_0_target_definition
    - ubuntu18
    - x86_64
    - memTest
    - CUDA11

######################
#    Build script    #
######################
.build_script_linux_humble:
  script: &humble_linux_build_script_definition
    - sudo chmod +x .ci/run_build_in_humble.sh
    - ./.ci/run_build_in_humble.sh
  

#.build_script_linux:
#  script: &linux_build_script_definition
#    - sudo chmod +x .ci/run_build_to_installer.sh
#    - ./.ci/run_build_to_installer.sh

#################
#  Build Tasks  #
#################

humble_u22_cu117_build:
  stage: build  
  #image: stereolabs/ci-compiler:ubuntu22.04-cuda11.7-tensorrt8.4.2-ros2-humble
  image: myzhar/test:ubuntu22.04-cuda11.7-tensorrt8.4.2-ros2-humble
  tags: *linux_docker_builder_target_definition
  script: *humble_linux_build_script_definition
  artifacts:
    name: *linux_artifacts_naming_definition
    paths: *artifacts_files_definition
    expire_in: *artifacts_expire_in_definition
  when: on_success

humble_l4t35_1_build:
  stage: build
  image: dustynv/ros:humble-ros-base-l4t-r35.1.0
  # Consider using qemu in the future
  tags: *linux_docker_builder_qemu_target_definition
  #tags: *linux_docker_builder_native_target_definition
  script: *humble_linux_build_script_definition
  artifacts:
    name: *linux_artifacts_naming_definition
    paths: *artifacts_files_definition
    expire_in: *artifacts_expire_in_definition
  when: on_success  

######################
#     Test script    #
######################
.setup_docker_sdk_before_script_linux:
  before_script: &linux_docker_install_sdk_before_script_definition
    - echo "Europe/Paris" > /etc/localtime
    - mv ZED_SDK_*.run ZED_SDK_Linux.run
    - apt update || true ; apt install -y lsb-release wget less udev sudo build-essential cmake python3 python3-dev zstd python3-pip python3-wheel git binutils-dev jq libusb-1* libopencv-dev
    - chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run -- silent
    - ln -sf /usr/bin/python3 /usr/bin/python
    - python -m pip install wheel setuptools #scikit-build
    #- python -m pip install opencv-python-headless
    # Replace libs by debug info ones
    #- mv lib/build/libsl_ai_dbginfo.so /usr/local/zed/lib/libsl_ai.so
    #- mv lib/build/libsl_zed_dbginfo.so /usr/local/zed/lib/libsl_zed.so

.setup_sdk_before_script_linux:
  before_script: &linux_install_sdk_before_script_definition
    - ls lib/build/*
    - mv ZED_SDK_*.run ZED_SDK_Linux.run
    - sudo apt update || true ; sudo apt install -y binutils-dev zstd jq git cmake
    - chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run -- silent
    # Replace libs by debug info ones
    #- mv lib/build/libsl_ai_dbginfo.so /usr/local/zed/lib/libsl_ai.so
    #- mv lib/build/libsl_zed_dbginfo.so /usr/local/zed/lib/libsl_zed.so

.setup_sdk_u22_cu117_web_before_script:
  before_script: &setup_sdk_u22_cu117_web_before_script_definition
    - sudo chmod +x .ci/download_and_install_sdk.sh 
    - ./.ci/download_and_install_sdk.sh 22 11 7 3 8
    # clean previous artifacts
    - rm -rf ../ros2_ws
    # create new ROS2 workspace folders
    - mkdir -p ../ros2_ws/install
    # move new artifacts in the workspace folder
    - cp -a ./ros2_ws/install ../ros2_ws/
    - rm -rf ./ros2_ws/

.test_script_linux:
  script: &linux_test_script_definition
    - sudo chmod +x .ci/run_tests.sh
    - ./.ci/run_tests.sh

###################
# Unit Test tasks #
###################

unit_test_ros2_humble_u22_cu117:
  stage: unit_test
  #image: stereolabs/ci-runner:ubuntu22.04-cuda11.7-ros2-humble
  image: myzhar/test:ubuntu22.04-cuda11.7-ros2-humble-v1.1
  tags: *runner_ubuntu_docker_live_desktop_target_definition
  before_script: *setup_sdk_u22_cu117_web_before_script_definition
  script: *linux_test_script_definition
  #artifacts:
  #  when: always
  #  name: *linux_artifacts_naming_definition
  #  paths: *test_artifacts_files_definition
  #  expire_in: *artifacts_expire_in_definition
  #  reports: *test_artifacts_report_files_definition
  needs: 
    - job: humble_u22_cu117_build
      artifacts: true
  when: manual

#unit_l4t35_1_test:
#  stage: unit_test
#  tags: *runner_linux_jetson_l4t35_1_target_definition
#  before_script: *linux_install_sdk_before_script_definition
#  script: *linux_test_script_definition
#  artifacts:
#    when: always
#    name: *linux_artifacts_naming_definition
#    paths: *test_artifacts_files_definition
#    expire_in: *artifacts_expire_in_definition
#    reports: *test_artifacts_report_files_definition
#  needs: 
#    - job: l4t35_1_jetsons_build
#      artifacts: true
#  when: manual

#unit_l4t32_7_test:
#  stage: unit_test
#  tags: *runner_linux_jetson_l4t32_7_target_definition
#  before_script: *linux_install_sdk_before_script_definition
#  script: *linux_test_script_definition
#  artifacts:
#    when: always
#    name: *linux_artifacts_naming_definition
#    paths: *test_artifacts_files_definition
#    expire_in: *artifacts_expire_in_definition
#    reports: *test_artifacts_report_files_definition
#  needs: 
#    - job: l4t32_7_jetsons_build
#      artifacts: true
#  when: manual

#unit_u18_cu111_docker_test:
#  stage: unit_test
#  image: stereolabs/ci-runner:ubuntu18.04-cuda11.1
#  tags: *runner_ubuntu_docker_desktop_target_definition
#  before_script: *linux_docker_install_sdk_before_script_definition
#  script: *linux_test_script_definition
#  artifacts:
#    when: always
#    name: *linux_artifacts_naming_definition
#    paths: *test_artifacts_files_definition
#    expire_in: *artifacts_expire_in_definition
#    reports: *test_artifacts_report_files_definition
#  needs: 
#    - job: u18_cu117_build
#      artifacts: true
#  when: manual

#unit_u20_cu114_docker_test:
#  stage: unit_test
#  image: stereolabs/ci-runner:ubuntu20.04-cuda11.4
#  tags: *runner_ubuntu_docker_desktop_target_definition
#  before_script: *linux_docker_install_sdk_before_script_definition
#  script: *linux_test_script_definition
#  artifacts:
#    when: always
#    name: *linux_artifacts_naming_definition
#    paths: *test_artifacts_files_definition
#    expire_in: *artifacts_expire_in_definition
#    reports: *test_artifacts_report_files_definition
#  needs: 
#    - job: u20_cu117_build
#      artifacts: true
#  when: manual

######################
#     memory script    #
######################
# .memory_script_linux:
#   script: &linux_memory_script_definition
#     - mv ZED_SDK_*.run ZED_SDK_Linux.run
#     - chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run silent
#     - sudo chmod +x .ci/run_tests.sh
#     - ./.ci/run_tests.sh -m

# .gpu_memory_script_linux:
#   script: &linux_gpu_memory_script_definition
#     - mv ZED_SDK_*.run ZED_SDK_Linux.run
#     - chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run silent
#     - sudo chmod +x .ci/run_tests.sh
#     - ./.ci/run_tests.sh -gpu

# .docker_memory_pre_script_linux:
#   script: &docker_memory_pre_script_linux_definition
#     - apt update || true ; apt install -y zstd binutils-dev

# #######################
# #     memory tasks    #
# #######################
# mem_cpu_u20_docker_x86_test:
#   stage: unit_test
#   tags: *runner_ubuntu_docker_desktop_target_definition
#   image: "stereolabs/ci-runner:ubuntu20.04-cuda11.4"
#   script: *linux_memory_script_definition
#   before_script: *docker_memory_pre_script_linux_definition
#   artifacts:
#     name: *linux_artifacts_naming_definition
#     paths: *memory_test_artifacts_files_definition
#     expire_in: *artifacts_expire_in_definition
#   needs: 
#     - job: u20_cu117_build
#       artifacts: true
#   when: manual
#   #rules : !reference [.rule-if-merge-request-or-release-or-schedule-of-tag, rules]
#   # allow_failure: true

# mem_gpu_u20_docker_x86_test:
#   stage: unit_test
#   tags: *runner_ubuntu_docker_desktop_target_definition
#   image: "stereolabs/ci-runner:ubuntu20.04-cuda11.7"
#   script: *linux_gpu_memory_script_definition
#   before_script: *docker_memory_pre_script_linux_definition
#   artifacts:
#     name: *linux_artifacts_naming_definition
#     paths: *memory_test_artifacts_files_definition
#     expire_in: *artifacts_expire_in_definition
#   needs: 
#     - job: u20_cu117_build
#       artifacts: true
#   #rules : !reference [.rule-if-merge-request-or-release-or-schedule-of-tag, rules]
#   when: manual
#   # allow_failure: true


########################
#  Deployment doc API  #
########################
# deploy_doc:
#   stage: deploy
#   image: stereolabs/ci-compiler:utils-lftp-uploader
#   script:
#     - echo "set ssl:verify-certificate no" > ~/.lftprc
#     - echo "*** Installing ZED SDK"
#     - INSTALLER_FILE=$(find . -maxdepth 1 -name 'ZED_SDK_*.run')
#     - "if [ -z '$INSTALLER_FILE' ]; then echo 'Installer not found' ; exit 1 ; fi"
#     - "echo 'Intsaller file:' $INSTALLER_FILE"
#     - "if [ -d /usr/local/zed/doc/API/html/ ]; then rm -rf /usr/local/zed/doc/API/html/ ; fi"
#     - chmod +x $INSTALLER_FILE
#     - mkdir -p /usr/local/zed/
#     - ./$INSTALLER_FILE --noexec --target /usr/local/zed/
#     - echo "*** Files to copy"
#     - ls /usr/local/zed/doc/API/html/
#     - SDK_VERSION_FILE_PATH="/usr/local/zed/include/sl/Camera.hpp"
#     - "if [ -e $SDK_VERSION_FILE_PATH ]; then echo Getting Version number; else echo Version number not found; exit 1; fi"
#     - major=$(grep -oE "ZED_SDK_MAJOR_VERSION [0-9]" "$SDK_VERSION_FILE_PATH")
#     - major=$(echo "$major" | egrep -o '[0-9]')
#     - minor=$(grep -oE "ZED_SDK_MINOR_VERSION [0-9]" "$SDK_VERSION_FILE_PATH")
#     - minor=$(echo "$minor" | egrep -o '[0-9]')
#     - patch=$(grep -oE "ZED_SDK_PATCH_VERSION [0-9]" "$SDK_VERSION_FILE_PATH")
#     - patch=$(echo "$patch" | egrep -o '[0-9]')
#     - version="$major.$minor.$patch"
#     - echo Deploying version $version
#     - "if [ ! -f /usr/local/zed/doc/API/html/index.html ]; then echo 'index.html not found, not deploying' ; exit 1 ; fi"
#     - lftp -e "mirror -R -e -p -P=10 /usr/local/zed/doc/API/html/ /" -u $ZED_DOC_API_FTP_USER,$ZED_DOC_API_FTP_PASSWORD $ZED_DOC_API_FTP_HOST
#   needs: 
#     - job: u18_cu117_build
#       artifacts: true
#   tags: *deploy_target_definition
#   only:
#     - tags
#   when: manual
#   # allow_failure: true

# ###########################
# #  Deployment of scripts  #
# ###########################
# deploy_scripts:
#   stage: deploy
#   image: stereolabs/ci-compiler:utils-boto3-uploader
#   script:
#     - mv .ci/deploy_scripts_to_digitalocean.py ./
#     - python deploy_scripts_to_digitalocean.py
#   tags: *deploy_target_definition
#   only:
#     - tags
#   when: manual
#   # allow_failure: true

# ########################
# #  Deployment installer to the DO bucket  #
# ########################
# .deploy_installer_template: &deploy_installer_definition
#   stage: deploy
#   image: stereolabs/ci-compiler:utils-boto3-uploader
#   script: &deploy_installer_script_definition
#     - mv .ci/push_to_digitalocean.py ./
#     - python push_to_digitalocean.py
#   tags: *deploy_target_definition
#   only:
#     - tags
#   when: manual
#   # allow_failure: true

# .deploy_nuget_template: &deploy_nuget_definition
#   stage: deploy
#   tags: *windows10_csharp_builder_target_definition
#   script: &deploy_nuget_script_definition
#     - "& 'C:\\Program Files\\Git\\bin\\bash.exe' ./.ci/push_nuget.sh"
#     #- If (Test-Path -Path "finished") {Remove-Item -Force "finished"}
#     #- If (Test-Path -Path "result.log") {Remove-Item -Force "result.log"}
#     #- If (Test-Path -Path "failure.txt") {Remove-Item -Force "failure.txt"}
#     #- "& 'C:\\Program Files\\Git\\git-bash.exe' -c './.ci/push_nuget.sh > result.log 2>&1 ; touch finished'"
#     #- Start-Process -Wait .\\.ci\\waitForFinished.bat
#     #- type result.log
#     #- If (Test-Path -Path "failure.txt") {exit 1}
#   only:
#     - tags
#   when: manual
#   # allow_failure: true

# l4t32_3_installer_deploy:
#   needs: 
#     - job: l4t32_3_jetsons_build
#       artifacts: true
#   <<: *deploy_installer_definition

# l4t32_4_installer_deploy:
#   needs: 
#     - job: l4t32_4_jetsons_build
#       artifacts: true
#   <<: *deploy_installer_definition

# l4t32_5_installer_deploy:
#   needs: 
#     - job: l4t32_5_jetsons_build
#       artifacts: true
#   <<: *deploy_installer_definition

# l4t32_6_installer_deploy:
#   needs: 
#     - job: l4t32_6_jetsons_build
#       artifacts: true
#   <<: *deploy_installer_definition

# l4t32_7_installer_deploy:
#   needs: 
#     - job: l4t32_7_jetsons_build
#       artifacts: true
#   <<: *deploy_installer_definition

# l4t35_1_installer_deploy:
#   needs: 
#     - job: l4t35_1_jetsons_build
#       artifacts: true
#   <<: *deploy_installer_definition

# u18_cu102_installer_deploy:
#   needs: 
#     - job: u18_cu102_build
#       artifacts: true
#   <<: *deploy_installer_definition

# # u18_cu114_installer_deploy:
# #   needs: 
# #     - job: u18_cu114_build
# #       artifacts: true
# #   <<: *deploy_installer_definition

# # u20_cu114_installer_deploy:
# #   needs: 
# #     - job: u20_cu114_build
# #       artifacts: true
# #   <<: *deploy_installer_definition

# u18_cu117_installer_deploy:
#   needs: 
#     - job: u18_cu117_build
#       artifacts: true
#   <<: *deploy_installer_definition

# u20_cu117_installer_deploy:
#   needs: 
#     - job: u20_cu117_build
#       artifacts: true
#   <<: *deploy_installer_definition

# u22_cu117_installer_deploy:
#   needs: 
#     - job: u22_cu117_build
#       artifacts: true
#   <<: *deploy_installer_definition

# win10_cu102_installer_deploy:
#   needs: 
#     - job: sign_win10_cu102_sign_installer
#       artifacts: true
#   <<: *deploy_installer_definition

# win10_cu117_installer_deploy:
#   needs: 
#     - job: sign_win10_cu117_sign_installer
#       artifacts: true
#   <<: *deploy_installer_definition

# # Python
# py_linux_aarch64_installer_deploy:
#   needs: 
#   - job: py_linux_aarch64_build
#     artifacts: true
#   <<: *deploy_installer_definition

# py_linux_x86_64_installer_deploy:
#   needs: 
#   - job: py_linux_x86_64_build
#     artifacts: true
#   <<: *deploy_installer_definition

# py_win_amd64_installer_deploy:
#   needs: 
#   - job: py_win_amd64_build
#     artifacts: true
#   <<: *deploy_installer_definition

# ROS2 Humble U22 Docker Image DEVEL - use the current branch source to build the wrapper
ros2_humble_u22_docker_image_dev:
  needs: 
  - job: humble_u22_cu117_build
    artifacts: true
  stage: deploy
  image: docker
  services: 
    - docker:dind
  script: 
    - docker login -u $CI_REGISTRY_USER_WALT -p $CI_REGISTRY_PASSWORD_WALT
    - cd docker
    - mkdir -p ./tmp_sources
    - cp -r ../zed* ./tmp_sources
    - IMG_TAG=${CI_PROJECT_NAME}_u22_cuda117_humble_${CI_COMMIT_BRANCH}
    - docker build -t "myzhar/test:${IMG_TAG}" -f ./Dockerfile.u22-cu117-humble-devel .
    - docker push myzhar/test:${IMG_TAG}
    - rm -r ./tmp_sources
  when: manual
  tags: *linux_docker_builder_target_definition
  except:
    - master
  allow_failure: true

# ROS2 Humble U22 Docker Image RELEASE - clone the Github master branch to build the wrapper
ros2_humble_u22_docker_image_rel:
  needs: 
  - job: humble_u22_cu117_build
    artifacts: true
  stage: deploy
  image: docker
  services: 
    - docker:dind
  script: 
    - docker login -u $CI_REGISTRY_USER_WALT -p $CI_REGISTRY_PASSWORD_WALT
    - cd docker
    - IMG_TAG=${CI_PROJECT_NAME}_u22_cuda117_humble_${CI_COMMIT_TAG}
    - docker build -t "myzhar/test:${IMG_TAG}" -f ./Dockerfile.u22-cu117-humble-release .
    - docker push myzhar/test:${IMG_TAG}
  when: manual
  tags: *linux_docker_builder_target_definition
  only:
    - master
  allow_failure: true

# ROS2 Humble L4T Docker Image DEVEL - use the current branch source to build the wrapper
ros2_humble_l4t_docker_image_dev:
  needs: 
  - job: humble_l4t35_1_build
    artifacts: true
  stage: deploy
  image: docker
  services: 
    - docker:dind
  script: 
    - docker login -u $CI_REGISTRY_USER_WALT -p $CI_REGISTRY_PASSWORD_WALT
    - cd docker
    - mkdir -p ./tmp_sources
    - cp -r ../zed* ./tmp_sources
    - IMG_TAG=${CI_PROJECT_NAME}_l4t35_1_humble_${CI_COMMIT_BRANCH}
    - docker build -t "myzhar/test:${IMG_TAG}" -f ./Dockerfile.l4t35_1-humble-devel .
    - docker push myzhar/test:${IMG_TAG}
    - rm -r ./tmp_sources
  when: manual
  tags: *linux_docker_builder_qemu_target_definition
  except:
    - master
  allow_failure: true

# ROS2 Humble L4T Docker Image RELEASE - clone the Github master branch to build the wrapper
ros2_humble_l4t_docker_image_rel:
  needs: 
  - job: humble_l4t35_1_build
    artifacts: true
  stage: deploy
  image: docker
  services: 
    - docker:dind
  script: 
    - docker login -u $CI_REGISTRY_USER_WALT -p $CI_REGISTRY_PASSWORD_WALT
    - cd docker
    - IMG_TAG=${CI_PROJECT_NAME}_l4t35_1_humble_${CI_COMMIT_TAG}
    - docker build -t "myzhar/test:${IMG_TAG}" -f ./Dockerfile.l4t35_1-humble-release .
    - docker push myzhar/test:${IMG_TAG}
  when: manual
  tags: *linux_docker_builder_qemu_target_definition
  only:
    - master
  allow_failure: true

  # Update Github master branch
github_push:
  needs: 
  - job: humble_u22_cu117_build
    artifacts: false
  stage: deploy
  image: alpine
  script: 
    - apk add --no-cache bash git
    - git config --global user.email "support@stereolabs.com"
    - git config --global user.name "Stereolabs"
    - git clone --recurse-submodules http://wlucetti:${GITLAB_PULL_TOKEN}@192.168.1.92/sl/zed-ros2-wrapper.git
    - cd zed-ros2-wrapper
    #- git remote set-url origin https://${GITHUB_PUSH_TOKEN}@github.com/stereolabs/dummy_repo.git
    - git remote set-url origin https://${GITHUB_PUSH_TOKEN}@github.com/stereolabs/zed-ros2-wrapper.git
    - git remote -v
    - git config pull.rebase false
    - git pull origin master --allow-unrelated-histories
    #- git push https://${GITHUB_PUSH_TOKEN}@github.com/stereolabs/dummy_repo.git
    - git push https://${GITHUB_PUSH_TOKEN}@github.com/stereolabs/zed-ros2-wrapper.git
  when: manual
  tags:
    - docker-builder
    - linux
  only:
    - master
  allow_failure: true

